// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yankeguo/bunker/model"
)

func newServer(db *gorm.DB, opts ...gen.DOOption) server {
	_server := server{}

	_server.serverDo.UseDB(db, opts...)
	_server.serverDo.UseModel(&model.Server{})

	tableName := _server.serverDo.TableName()
	_server.ALL = field.NewAsterisk(tableName)
	_server.ID = field.NewString(tableName, "id")
	_server.Address = field.NewString(tableName, "address")
	_server.CreatedAt = field.NewTime(tableName, "created_at")

	_server.fillFieldMap()

	return _server
}

type server struct {
	serverDo

	ALL       field.Asterisk
	ID        field.String
	Address   field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s server) Table(newTableName string) *server {
	s.serverDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s server) As(alias string) *server {
	s.serverDo.DO = *(s.serverDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *server) updateTableName(table string) *server {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Address = field.NewString(table, "address")
	s.CreatedAt = field.NewTime(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *server) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *server) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["address"] = s.Address
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s server) clone(db *gorm.DB) server {
	s.serverDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s server) replaceDB(db *gorm.DB) server {
	s.serverDo.ReplaceDB(db)
	return s
}

type serverDo struct{ gen.DO }

func (s serverDo) Debug() *serverDo {
	return s.withDO(s.DO.Debug())
}

func (s serverDo) WithContext(ctx context.Context) *serverDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverDo) ReadDB() *serverDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverDo) WriteDB() *serverDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverDo) Session(config *gorm.Session) *serverDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverDo) Clauses(conds ...clause.Expression) *serverDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverDo) Returning(value interface{}, columns ...string) *serverDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverDo) Not(conds ...gen.Condition) *serverDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverDo) Or(conds ...gen.Condition) *serverDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverDo) Select(conds ...field.Expr) *serverDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverDo) Where(conds ...gen.Condition) *serverDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverDo) Order(conds ...field.Expr) *serverDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverDo) Distinct(cols ...field.Expr) *serverDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverDo) Omit(cols ...field.Expr) *serverDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverDo) Join(table schema.Tabler, on ...field.Expr) *serverDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverDo) LeftJoin(table schema.Tabler, on ...field.Expr) *serverDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverDo) RightJoin(table schema.Tabler, on ...field.Expr) *serverDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverDo) Group(cols ...field.Expr) *serverDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverDo) Having(conds ...gen.Condition) *serverDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverDo) Limit(limit int) *serverDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverDo) Offset(offset int) *serverDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *serverDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverDo) Unscoped() *serverDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverDo) Create(values ...*model.Server) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverDo) CreateInBatches(values []*model.Server, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverDo) Save(values ...*model.Server) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverDo) First() (*model.Server, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Server), nil
	}
}

func (s serverDo) Take() (*model.Server, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Server), nil
	}
}

func (s serverDo) Last() (*model.Server, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Server), nil
	}
}

func (s serverDo) Find() ([]*model.Server, error) {
	result, err := s.DO.Find()
	return result.([]*model.Server), err
}

func (s serverDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Server, err error) {
	buf := make([]*model.Server, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverDo) FindInBatches(result *[]*model.Server, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverDo) Attrs(attrs ...field.AssignExpr) *serverDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverDo) Assign(attrs ...field.AssignExpr) *serverDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverDo) Joins(fields ...field.RelationField) *serverDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverDo) Preload(fields ...field.RelationField) *serverDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverDo) FirstOrInit() (*model.Server, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Server), nil
	}
}

func (s serverDo) FirstOrCreate() (*model.Server, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Server), nil
	}
}

func (s serverDo) FindByPage(offset int, limit int) (result []*model.Server, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverDo) Delete(models ...*model.Server) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverDo) withDO(do gen.Dao) *serverDo {
	s.DO = *do.(*gen.DO)
	return s
}
