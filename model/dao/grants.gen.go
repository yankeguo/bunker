// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yankeguo/bunker/model"
)

func newGrant(db *gorm.DB, opts ...gen.DOOption) grant {
	_grant := grant{}

	_grant.grantDo.UseDB(db, opts...)
	_grant.grantDo.UseModel(&model.Grant{})

	tableName := _grant.grantDo.TableName()
	_grant.ALL = field.NewAsterisk(tableName)
	_grant.ID = field.NewString(tableName, "id")
	_grant.UserID = field.NewString(tableName, "user_id")
	_grant.ServerUser = field.NewString(tableName, "server_user")
	_grant.ServerID = field.NewString(tableName, "server_id")
	_grant.CreatedAt = field.NewTime(tableName, "created_at")
	_grant.User = grantBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
		Keys: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Keys", "model.Key"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Keys.User", "model.User"),
			},
		},
		Grants: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Grants", "model.Grant"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Grants.User", "model.User"),
			},
		},
		Tokens: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Tokens", "model.Token"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Tokens.User", "model.User"),
			},
		},
	}

	_grant.fillFieldMap()

	return _grant
}

type grant struct {
	grantDo

	ALL        field.Asterisk
	ID         field.String
	UserID     field.String
	ServerUser field.String
	ServerID   field.String
	CreatedAt  field.Time
	User       grantBelongsToUser

	fieldMap map[string]field.Expr
}

func (g grant) Table(newTableName string) *grant {
	g.grantDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g grant) As(alias string) *grant {
	g.grantDo.DO = *(g.grantDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *grant) updateTableName(table string) *grant {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewString(table, "id")
	g.UserID = field.NewString(table, "user_id")
	g.ServerUser = field.NewString(table, "server_user")
	g.ServerID = field.NewString(table, "server_id")
	g.CreatedAt = field.NewTime(table, "created_at")

	g.fillFieldMap()

	return g
}

func (g *grant) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *grant) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 6)
	g.fieldMap["id"] = g.ID
	g.fieldMap["user_id"] = g.UserID
	g.fieldMap["server_user"] = g.ServerUser
	g.fieldMap["server_id"] = g.ServerID
	g.fieldMap["created_at"] = g.CreatedAt

}

func (g grant) clone(db *gorm.DB) grant {
	g.grantDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g grant) replaceDB(db *gorm.DB) grant {
	g.grantDo.ReplaceDB(db)
	return g
}

type grantBelongsToUser struct {
	db *gorm.DB

	field.RelationField

	Keys struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
	Grants struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
	Tokens struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
}

func (a grantBelongsToUser) Where(conds ...field.Expr) *grantBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a grantBelongsToUser) WithContext(ctx context.Context) *grantBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a grantBelongsToUser) Session(session *gorm.Session) *grantBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a grantBelongsToUser) Model(m *model.Grant) *grantBelongsToUserTx {
	return &grantBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type grantBelongsToUserTx struct{ tx *gorm.Association }

func (a grantBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a grantBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a grantBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a grantBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a grantBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a grantBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type grantDo struct{ gen.DO }

func (g grantDo) Debug() *grantDo {
	return g.withDO(g.DO.Debug())
}

func (g grantDo) WithContext(ctx context.Context) *grantDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g grantDo) ReadDB() *grantDo {
	return g.Clauses(dbresolver.Read)
}

func (g grantDo) WriteDB() *grantDo {
	return g.Clauses(dbresolver.Write)
}

func (g grantDo) Session(config *gorm.Session) *grantDo {
	return g.withDO(g.DO.Session(config))
}

func (g grantDo) Clauses(conds ...clause.Expression) *grantDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g grantDo) Returning(value interface{}, columns ...string) *grantDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g grantDo) Not(conds ...gen.Condition) *grantDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g grantDo) Or(conds ...gen.Condition) *grantDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g grantDo) Select(conds ...field.Expr) *grantDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g grantDo) Where(conds ...gen.Condition) *grantDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g grantDo) Order(conds ...field.Expr) *grantDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g grantDo) Distinct(cols ...field.Expr) *grantDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g grantDo) Omit(cols ...field.Expr) *grantDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g grantDo) Join(table schema.Tabler, on ...field.Expr) *grantDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g grantDo) LeftJoin(table schema.Tabler, on ...field.Expr) *grantDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g grantDo) RightJoin(table schema.Tabler, on ...field.Expr) *grantDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g grantDo) Group(cols ...field.Expr) *grantDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g grantDo) Having(conds ...gen.Condition) *grantDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g grantDo) Limit(limit int) *grantDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g grantDo) Offset(offset int) *grantDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g grantDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *grantDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g grantDo) Unscoped() *grantDo {
	return g.withDO(g.DO.Unscoped())
}

func (g grantDo) Create(values ...*model.Grant) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g grantDo) CreateInBatches(values []*model.Grant, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g grantDo) Save(values ...*model.Grant) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g grantDo) First() (*model.Grant, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Grant), nil
	}
}

func (g grantDo) Take() (*model.Grant, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Grant), nil
	}
}

func (g grantDo) Last() (*model.Grant, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Grant), nil
	}
}

func (g grantDo) Find() ([]*model.Grant, error) {
	result, err := g.DO.Find()
	return result.([]*model.Grant), err
}

func (g grantDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Grant, err error) {
	buf := make([]*model.Grant, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g grantDo) FindInBatches(result *[]*model.Grant, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g grantDo) Attrs(attrs ...field.AssignExpr) *grantDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g grantDo) Assign(attrs ...field.AssignExpr) *grantDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g grantDo) Joins(fields ...field.RelationField) *grantDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g grantDo) Preload(fields ...field.RelationField) *grantDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g grantDo) FirstOrInit() (*model.Grant, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Grant), nil
	}
}

func (g grantDo) FirstOrCreate() (*model.Grant, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Grant), nil
	}
}

func (g grantDo) FindByPage(offset int, limit int) (result []*model.Grant, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g grantDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g grantDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g grantDo) Delete(models ...*model.Grant) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *grantDo) withDO(do gen.Dao) *grantDo {
	g.DO = *do.(*gen.DO)
	return g
}
