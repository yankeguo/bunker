// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yankeguo/bunker/model"
)

func newKey(db *gorm.DB, opts ...gen.DOOption) key {
	_key := key{}

	_key.keyDo.UseDB(db, opts...)
	_key.keyDo.UseModel(&model.Key{})

	tableName := _key.keyDo.TableName()
	_key.ALL = field.NewAsterisk(tableName)
	_key.ID = field.NewString(tableName, "id")
	_key.DisplayName = field.NewString(tableName, "display_name")
	_key.UserID = field.NewString(tableName, "user_id")
	_key.CreatedAt = field.NewTime(tableName, "created_at")
	_key.User = keyBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
		Keys: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Keys", "model.Key"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Keys.User", "model.User"),
			},
		},
		Grants: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Grants", "model.Grant"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Grants.User", "model.User"),
			},
		},
		Tokens: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Tokens", "model.Token"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Tokens.User", "model.User"),
			},
		},
	}

	_key.fillFieldMap()

	return _key
}

type key struct {
	keyDo

	ALL         field.Asterisk
	ID          field.String
	DisplayName field.String
	UserID      field.String
	CreatedAt   field.Time
	User        keyBelongsToUser

	fieldMap map[string]field.Expr
}

func (k key) Table(newTableName string) *key {
	k.keyDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k key) As(alias string) *key {
	k.keyDo.DO = *(k.keyDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *key) updateTableName(table string) *key {
	k.ALL = field.NewAsterisk(table)
	k.ID = field.NewString(table, "id")
	k.DisplayName = field.NewString(table, "display_name")
	k.UserID = field.NewString(table, "user_id")
	k.CreatedAt = field.NewTime(table, "created_at")

	k.fillFieldMap()

	return k
}

func (k *key) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *key) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 5)
	k.fieldMap["id"] = k.ID
	k.fieldMap["display_name"] = k.DisplayName
	k.fieldMap["user_id"] = k.UserID
	k.fieldMap["created_at"] = k.CreatedAt

}

func (k key) clone(db *gorm.DB) key {
	k.keyDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k key) replaceDB(db *gorm.DB) key {
	k.keyDo.ReplaceDB(db)
	return k
}

type keyBelongsToUser struct {
	db *gorm.DB

	field.RelationField

	Keys struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
	Grants struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
	Tokens struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
}

func (a keyBelongsToUser) Where(conds ...field.Expr) *keyBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a keyBelongsToUser) WithContext(ctx context.Context) *keyBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a keyBelongsToUser) Session(session *gorm.Session) *keyBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a keyBelongsToUser) Model(m *model.Key) *keyBelongsToUserTx {
	return &keyBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type keyBelongsToUserTx struct{ tx *gorm.Association }

func (a keyBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a keyBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a keyBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a keyBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a keyBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a keyBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type keyDo struct{ gen.DO }

func (k keyDo) Debug() *keyDo {
	return k.withDO(k.DO.Debug())
}

func (k keyDo) WithContext(ctx context.Context) *keyDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k keyDo) ReadDB() *keyDo {
	return k.Clauses(dbresolver.Read)
}

func (k keyDo) WriteDB() *keyDo {
	return k.Clauses(dbresolver.Write)
}

func (k keyDo) Session(config *gorm.Session) *keyDo {
	return k.withDO(k.DO.Session(config))
}

func (k keyDo) Clauses(conds ...clause.Expression) *keyDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k keyDo) Returning(value interface{}, columns ...string) *keyDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k keyDo) Not(conds ...gen.Condition) *keyDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k keyDo) Or(conds ...gen.Condition) *keyDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k keyDo) Select(conds ...field.Expr) *keyDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k keyDo) Where(conds ...gen.Condition) *keyDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k keyDo) Order(conds ...field.Expr) *keyDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k keyDo) Distinct(cols ...field.Expr) *keyDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k keyDo) Omit(cols ...field.Expr) *keyDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k keyDo) Join(table schema.Tabler, on ...field.Expr) *keyDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k keyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *keyDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k keyDo) RightJoin(table schema.Tabler, on ...field.Expr) *keyDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k keyDo) Group(cols ...field.Expr) *keyDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k keyDo) Having(conds ...gen.Condition) *keyDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k keyDo) Limit(limit int) *keyDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k keyDo) Offset(offset int) *keyDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k keyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *keyDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k keyDo) Unscoped() *keyDo {
	return k.withDO(k.DO.Unscoped())
}

func (k keyDo) Create(values ...*model.Key) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k keyDo) CreateInBatches(values []*model.Key, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k keyDo) Save(values ...*model.Key) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k keyDo) First() (*model.Key, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Key), nil
	}
}

func (k keyDo) Take() (*model.Key, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Key), nil
	}
}

func (k keyDo) Last() (*model.Key, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Key), nil
	}
}

func (k keyDo) Find() ([]*model.Key, error) {
	result, err := k.DO.Find()
	return result.([]*model.Key), err
}

func (k keyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Key, err error) {
	buf := make([]*model.Key, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k keyDo) FindInBatches(result *[]*model.Key, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k keyDo) Attrs(attrs ...field.AssignExpr) *keyDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k keyDo) Assign(attrs ...field.AssignExpr) *keyDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k keyDo) Joins(fields ...field.RelationField) *keyDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k keyDo) Preload(fields ...field.RelationField) *keyDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k keyDo) FirstOrInit() (*model.Key, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Key), nil
	}
}

func (k keyDo) FirstOrCreate() (*model.Key, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Key), nil
	}
}

func (k keyDo) FindByPage(offset int, limit int) (result []*model.Key, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k keyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k keyDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k keyDo) Delete(models ...*model.Key) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *keyDo) withDO(do gen.Dao) *keyDo {
	k.DO = *do.(*gen.DO)
	return k
}
