// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yankeguo/bunker/model"
)

func newUser(db *gorm.DB, opts ...gen.DOOption) user {
	_user := user{}

	_user.userDo.UseDB(db, opts...)
	_user.userDo.UseModel(&model.User{})

	tableName := _user.userDo.TableName()
	_user.ALL = field.NewAsterisk(tableName)
	_user.ID = field.NewString(tableName, "id")
	_user.PasswordDigest = field.NewString(tableName, "password_digest")
	_user.CreatedAt = field.NewTime(tableName, "created_at")
	_user.VisitedAt = field.NewTime(tableName, "visited_at")
	_user.IsAdmin = field.NewBool(tableName, "is_admin")
	_user.IsBlocked = field.NewBool(tableName, "is_blocked")
	_user.Keys = userHasManyKeys{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Keys", "model.Key"),
		User: struct {
			field.RelationField
			Keys struct {
				field.RelationField
			}
			Grants struct {
				field.RelationField
				User struct {
					field.RelationField
				}
			}
			Tokens struct {
				field.RelationField
				User struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Keys.User", "model.User"),
			Keys: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Keys.User.Keys", "model.Key"),
			},
			Grants: struct {
				field.RelationField
				User struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Keys.User.Grants", "model.Grant"),
				User: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Keys.User.Grants.User", "model.User"),
				},
			},
			Tokens: struct {
				field.RelationField
				User struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Keys.User.Tokens", "model.Token"),
				User: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Keys.User.Tokens.User", "model.User"),
				},
			},
		},
	}

	_user.Grants = userHasManyGrants{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Grants", "model.Grant"),
	}

	_user.Tokens = userHasManyTokens{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Tokens", "model.Token"),
	}

	_user.fillFieldMap()

	return _user
}

type user struct {
	userDo

	ALL            field.Asterisk
	ID             field.String
	PasswordDigest field.String
	CreatedAt      field.Time
	VisitedAt      field.Time
	IsAdmin        field.Bool
	IsBlocked      field.Bool
	Keys           userHasManyKeys

	Grants userHasManyGrants

	Tokens userHasManyTokens

	fieldMap map[string]field.Expr
}

func (u user) Table(newTableName string) *user {
	u.userDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u user) As(alias string) *user {
	u.userDo.DO = *(u.userDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *user) updateTableName(table string) *user {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewString(table, "id")
	u.PasswordDigest = field.NewString(table, "password_digest")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.VisitedAt = field.NewTime(table, "visited_at")
	u.IsAdmin = field.NewBool(table, "is_admin")
	u.IsBlocked = field.NewBool(table, "is_blocked")

	u.fillFieldMap()

	return u
}

func (u *user) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *user) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["password_digest"] = u.PasswordDigest
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["visited_at"] = u.VisitedAt
	u.fieldMap["is_admin"] = u.IsAdmin
	u.fieldMap["is_blocked"] = u.IsBlocked

}

func (u user) clone(db *gorm.DB) user {
	u.userDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u user) replaceDB(db *gorm.DB) user {
	u.userDo.ReplaceDB(db)
	return u
}

type userHasManyKeys struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
		Keys struct {
			field.RelationField
		}
		Grants struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}
		Tokens struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}
	}
}

func (a userHasManyKeys) Where(conds ...field.Expr) *userHasManyKeys {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyKeys) WithContext(ctx context.Context) *userHasManyKeys {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyKeys) Session(session *gorm.Session) *userHasManyKeys {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyKeys) Model(m *model.User) *userHasManyKeysTx {
	return &userHasManyKeysTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyKeysTx struct{ tx *gorm.Association }

func (a userHasManyKeysTx) Find() (result []*model.Key, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyKeysTx) Append(values ...*model.Key) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyKeysTx) Replace(values ...*model.Key) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyKeysTx) Delete(values ...*model.Key) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyKeysTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyKeysTx) Count() int64 {
	return a.tx.Count()
}

type userHasManyGrants struct {
	db *gorm.DB

	field.RelationField
}

func (a userHasManyGrants) Where(conds ...field.Expr) *userHasManyGrants {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyGrants) WithContext(ctx context.Context) *userHasManyGrants {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyGrants) Session(session *gorm.Session) *userHasManyGrants {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyGrants) Model(m *model.User) *userHasManyGrantsTx {
	return &userHasManyGrantsTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyGrantsTx struct{ tx *gorm.Association }

func (a userHasManyGrantsTx) Find() (result []*model.Grant, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyGrantsTx) Append(values ...*model.Grant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyGrantsTx) Replace(values ...*model.Grant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyGrantsTx) Delete(values ...*model.Grant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyGrantsTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyGrantsTx) Count() int64 {
	return a.tx.Count()
}

type userHasManyTokens struct {
	db *gorm.DB

	field.RelationField
}

func (a userHasManyTokens) Where(conds ...field.Expr) *userHasManyTokens {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyTokens) WithContext(ctx context.Context) *userHasManyTokens {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyTokens) Session(session *gorm.Session) *userHasManyTokens {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyTokens) Model(m *model.User) *userHasManyTokensTx {
	return &userHasManyTokensTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyTokensTx struct{ tx *gorm.Association }

func (a userHasManyTokensTx) Find() (result []*model.Token, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyTokensTx) Append(values ...*model.Token) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyTokensTx) Replace(values ...*model.Token) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyTokensTx) Delete(values ...*model.Token) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyTokensTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyTokensTx) Count() int64 {
	return a.tx.Count()
}

type userDo struct{ gen.DO }

func (u userDo) Debug() *userDo {
	return u.withDO(u.DO.Debug())
}

func (u userDo) WithContext(ctx context.Context) *userDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDo) ReadDB() *userDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDo) WriteDB() *userDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDo) Session(config *gorm.Session) *userDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDo) Clauses(conds ...clause.Expression) *userDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDo) Returning(value interface{}, columns ...string) *userDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDo) Not(conds ...gen.Condition) *userDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDo) Or(conds ...gen.Condition) *userDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDo) Select(conds ...field.Expr) *userDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDo) Where(conds ...gen.Condition) *userDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDo) Order(conds ...field.Expr) *userDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDo) Distinct(cols ...field.Expr) *userDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDo) Omit(cols ...field.Expr) *userDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDo) Join(table schema.Tabler, on ...field.Expr) *userDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDo) RightJoin(table schema.Tabler, on ...field.Expr) *userDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDo) Group(cols ...field.Expr) *userDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDo) Having(conds ...gen.Condition) *userDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDo) Limit(limit int) *userDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDo) Offset(offset int) *userDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDo) Unscoped() *userDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDo) Create(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDo) CreateInBatches(values []*model.User, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDo) Save(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDo) First() (*model.User, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Take() (*model.User, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Last() (*model.User, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Find() ([]*model.User, error) {
	result, err := u.DO.Find()
	return result.([]*model.User), err
}

func (u userDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error) {
	buf := make([]*model.User, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDo) FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDo) Attrs(attrs ...field.AssignExpr) *userDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDo) Assign(attrs ...field.AssignExpr) *userDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDo) Joins(fields ...field.RelationField) *userDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDo) Preload(fields ...field.RelationField) *userDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDo) FirstOrInit() (*model.User, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FirstOrCreate() (*model.User, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FindByPage(offset int, limit int) (result []*model.User, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDo) Delete(models ...*model.User) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDo) withDO(do gen.Dao) *userDo {
	u.DO = *do.(*gen.DO)
	return u
}
